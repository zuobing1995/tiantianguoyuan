day09回顾
  函数传参
    把数据给函数
    传递方式:
      位置传参
        序列传参
      关键字传参
        字典关键字


  函数的形参
    接收调用者传递过来的数据

  缺省参数

  函数的形参的四种定义方式
    位置形参
    星号元组形参 *args
    命名关键字形参 *, *args 之后
      强制要求关键字传参
    双星号字典形参 **kwargs
        def fx(**kwargs):
            print(kwargs)
        fx(a=10, b=20)


day10笔记

全局变量和局部变量
  局部变量:
    定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
    局部变量只能在函数内部使用
    局部变量在函数调用时才能被创建,在函数调用之后会自动销毁
  全局变量
    定义在函数外部,模块内部的变量称为全局变量
    全局变量所有函数都可以直接访问(但函数内部不能将其赋值)
  示例见:
    global_local.py

  说明:
    1. 局部变量只能在其被声明的函数内部访问,而全局变量可以在整个模块范围内访问
    2. 在函数内部赋值语句不会对全局变量造成影响

示意:
  L = []
  def input_number():
      L2 = []
      while True:
          n = int(input("请输入正整数"))  # 1 2 3 4
          if n < 0:
              break
          L2.append(n)
      L = L2
  input_number()
  print(L)


globals() / locals() 函数
  globals()  返回当前全局作用域内变量的字典
  locals()  返回当前局部作用内变量的字典
示例见:
  globals_locals.py

函数变量:
  函数名是变量,它在创建函数时绑定一个函数
    示例见:
      function_variable.py

  一个函数可以作为另一个函数的实参传递
    示例见:
      function_give_function.py

    看懂下面的代码在干什么:
      def myinput(fn):
          L = [1, 3, 5, 7, 9]
          return fn(L)

      print(myinput(max))  # 9
      print(myinput(min))  # 1
      print(myinput(sum))  # 25

  函数可以返回另一个函数
    示例见:
      return_function.py

练习:
  写一个计算公式的解释执行器
    已知有如下一些函数:
      def myadd(x, y):
          return x + y
      def mysub(x, y):
          return x - y
      def mymul(x, y):
          return x * y
    
      def get_fun(op):
          .... # 此处自己实现

    get_fun(op)函数传入字符串'加'或'+' 返回myadd
    get_fun(op)函数传入字符串'乘'或'*' 返回mymul

    在主函数中程序如下:
      def main():
         while True:
            s = input("请输入计算公式:")  # 10 加 20
            L = s.split()  # L=['10', '加', '20']
            a = int(L[0])
            b = int(L[2])
            fn = get_fun(L[1])
            print("结果是:", fn(a, b))  # 结果是: 30


函数嵌套定义
  函数嵌套定义是指一个函数里用def语句来创建另一个函数的情况

  示例:
    def fn_outter():
        print("fn_outter() 被调用")

        def fn_inner():
            print("fn_inner 被调用")

        fn_inner()  #调用嵌套函数fn_nner
        fn_inner()  # 第二次调用
        print('fn_outter() 调用结束')

    fn_outter() # 调用外层函数


python3的四个作用域
  作用域也叫名字空间,是访问变量时查找变量名的范围空间

python的四个作用域 LEGB
  作用域             英文解释               英文简写
 局部作用域(函数内)  Local(function)             L
 外部嵌套函数作用域  Enclosing function locals   E
 函数定义所在模块作用域  Global(module)           G
 python内置模块的作用域 Builtin(Python)          B

示例见:
  namespace.py

变量名查找规则:
  在访问变量时,先查找本地变量,然后是包裹此函数外部的函数内的变量,之后是全局变量,最后是内建作用域内的变量
    即: L  --->   E   --->   G ----> B

  在默认情况下,变量名赋值会在当前作用域内创建变量和修改变量


  

global 语句
  作用:
    告诉解释执行器,global语句声明的一个或多个变量,这些变量的作用域为模块级的作用域,也称作全局作用域
    全局声明 global 将赋值变量映射到模块文件内部的作用域
  语法:
    global 变量名1, 变量名2, ...
  示例见:
    global.py
  说明:
    1. 全局变量如果要在函数内部被赋值,则必须经过全局声明(否则会被认为是局部变量)
    2. 全局变量在函数内部不经过声明就可以直接访问
    3.不能先声明局部变量,再用global声明为全局变量,此做法不附合规则
    4. global变量列表里的变量名不能出现在函数的形参列表里


nonlocal语句
  作用:
    告诉解释执行器,nonlocal声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量
  语法:
    nonlocal 变量名1, 变量名2, ....
  示例见:
    nonlocal.py

  说明:
    1. nonlocal 语句只能在被嵌套函数的内部进行使用
    2. 对nonlocal变量进行赋值操作,将对外部嵌套函数作用域内的变量进行操作
    3. 当有两层或两层以上函数嵌套时,访问nonlocal变量只对最近一层变量进行操作
    4. nonlocal语句的变量列表里的变量名,不能出现在此函数形参列表中




def 语句
  语法:
    def 变量/函数名(形参):
        ....

lambda 表达式
  作用:
    创建一个匿名函数对象
    同 def 类似,但不提供函数名
  语法:
    lambda [形参名1, 形参名2, ...]: 表达式
  示例见:
    lambda.py

语法说明:
  1. lambda 只是一个表达式,它用来创建一个函数
  2. 当lambda 表达式调用时,先执行冒号(:)后的表达式,并返回表达式的结果的引用
  3. lambda 表达式创建的函数只能包含一条表达式
  4. lambda比函数简单且可以随时创建和销毁,有利于减少程序的偶合度


练习:
  1. 写一个lambda表达式,创建一个函数,此函数判断参数n的平方加1能否被5整除.如果能整除返回True,否则返回False
    fx = lambda n: ...
    print(fx(3))  # True
    print(fx(4))  # False

  2. 写一个lambda表达式,返两个形参的最大值
    def mymax(x, y):
        ...
    mymax = lambda .....
    print(mymax(100, 200))  # 200

  看懂下面的程序在做什么?
    def fx(f, x, y):
        print(f(x, y))

    fx((lambda a, b: a + b), 100, 200)
    fx((lambda x, y: x ** y), 3, 4)





eval, exec 函数
eval() 函数
  作用:
    把一个字符串当成一个表达式来执行,返回表达式执行后的结果
  格式:
    eval(source, globals=None, locals=None)

  示例见:
    eval.py

exec() 函数
  作用:
    把一个字符串当成程序来执行
  格式:
    exec(source, globals=None, locals=None)
  示例:
    s = "x=100\ny=200\nprint('x+y=', x+y)\ndel x, y"
    exec(s)



练习:
  1. 给出一个数n,写一个函数myfac(n)来计算n!(n的阶乘)
    n! = 1*2*3*4*....*n

      print(myfac(5))  # 120

  2. 给出一个数n,写一个函数计算:
      1 + 2**2 + 3**3 + 4**4 + .... n**n的和

  3. 写程序打印杨辉三角 (只打印6层)
          1
         1 1
        1 2 1
       1 3 3 1
      1 4 6 4 1
    1 5 10 10 5 1







