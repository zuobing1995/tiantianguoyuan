day10回顾:
  作用域
    四个作用域
      局部
      外部嵌套函数作用域
      全局作用域
      内建函数的作用域

    全局变量
       globals()  返回全局变量的字典
    局部变量
       locals()  返回当前作用域内局部变量的字典
函数变量
  def 函数名():
      pass
  1. 函数可以传入另一个函数
  2. 函数可以返回另一个函数

函数的嵌套定义:
    def f1():
        def f2():
            def f3():
                pass


globals 语句
   globals a, b, c

nonlocal 语句
   nonlocal a, b, c


eval()
exec()

def 语句
   创建一个有名字的函数
第二种创建函数的方式:
   lambda 表达式
      lambda [形参列表 ]: 表达式



day11笔记

函数式编程
  是指用一系列函数解决问题

  示列:
    求 1 + 2 + 3 + 4 + .... + 100的和
    # 方法1
    s = 0
    for x in range(1, 101):
        s += x
    print(s)
    # 方法2
    print(sum(range(1, 101)))


函数的可重入性:
  当一个函数的输入一定，则输出必然一定的函数称为可重入函数

  说明:
    可重入函数内一定不会访问除局部变量以外的变量
  示例:
    # 可重入函数:
    def myadd(x, y):
        return x + y
    print(myadd(100, 200))  # 300

    # 不可重入函数:
    y = 200
    def myadd(x):
        return x + y
    print(myadd(100))  # 300
    y = 300
    print(myadd(100))  # 400



高阶函数 High Order Function
  什么是高阶函数:
    满足下列条件中的一个的函数即为高阶函数
      1. 函数接收一个或多个函数作为参数传入
      2. 函数返回一个函数

python内置的高阶函数:
  map, filter, sorted

map函数:
  map(func, *iterable)  返回一个可迭代对象,此可迭代对象用函数func对可迭代对象iterable中的每一个元素作为参数计算后得到新的数据

  示例见:
    mymap.py
练习 ：
  1. 求: 1**2 + 2**2 + 3**2 + .... + 9**2的和 
  2. 求: 1**3 + 2**3 + 3**3 + .... + 9**3的和 


示例2见:
  mymap2.py

练习:
  求 1**9 + 2**8 + 3**7 + .... + 9**1的和

  答案:
    print(sum(map(pow, range(1, 10), range(9, 0, -1))))


filter 函数:
  filter(function, iterable)
  作用:
    1. 筛选可迭代对象iterable中的数据,返回一个可迭代对象,此可迭代对象只返回iterable中附合条件的数据
    2. function将对iterable中提供的每个数据进行求布尔值，如果为True则保留，返回False 则丢弃此数据
  示例见:
    myfilter.py

练习:
  1. 将 1 ~ 20的偶数用filter生成可迭代对象后，将可迭代对象生成的数据存于列表中
    最终结果:
      L = [2, 4, 6, 8, ... 18, 20]
  2. 用filter函数将 1~100之间所有的素数放入到列表L中
     print(L)  # [2, 3, 5, 7, 11, ....]


sorted 函数
  作用:
    将原可迭代对象的数据进行排序，生成排序后的列表
  函数参数格式:
    sorted(iterable, key=None, reverse=False)
  说明:
    iterable 可迭代对象
    key  函数是用来提供一个值，这个值将作为排序的依据，如果不给出key函数，则用原数据的值进行比较和排序
    reverse 标志用来设置是否降序排序
  示例:
    L = [5, -2, -4, 0, 3, 1]
    L2 = sorted(L)  # [-4, -2, 0, 1, 3, 5]
    L3 = sorted(L, reverse=True) #[5,3,1,0,-2,-4]
    L4 = sroted(L, key=abs) # [0, 1, -2, 3, -4, 5] 按绝对值
    L5 = sorted(L, key=abs, reverse=True) # [5, -4, 3, -2, 1, 0]
    names = ['Tom', 'Jerry', 'Spike', 'Tyke']
    L6 = sorted(names)  # ['Jerry', 'Spike', 'Tom', 'Tyke']
    L7 = sorted(names, key=len)  # ['Tom', 'Tyke', 'Jerry', 'Spike']

练习:
  names = ['Tom', 'Jerry', 'Spike', 'Tyke']
  排序的依据为字符串的反序
            'moT' 'yrreJ'  'ekipS'  'ekyT'

  结果:  ['Spike', 'Tyke', 'Tom', 'Jerry']



递归函数 recursion
  递归是指 函数直接或间接的调用自身

递归示例:
  # 函数直接调用自身
  def f():
      f()  # 直接调用自身
  f()
  print("递归完成")

  # 函数间接调用自身
  def fa():
      fb()
  def fb():
      fa()
  fa()
  print("递归完成")

递归说明:
  递归一定要控制递归的层数，当符合某一条件时要终止递归调用
  几乎所有的递归都能用while循环来代替

递归的优缺点:
  优点：
    可以把问题简单化，让思路理会为清晰，代码更简洁
  缺点:
    递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果
递归调用分为两个阶段:
  递推阶段:
    从原问题出发，按递归公式递推，从未知到已知，最终达到递归终止条件
  回归阶段:
    按递归终止条件求出结果，逆向逐步代入递归公式，回归到原问题求解

示例:
  限制递归层数的示例:
  见：
    recursion2.py

递归求阶乘示例见:
　　recursion_factorial.py

练习:
  用递归实现求和:
    def mysum(n):
        # 返回 1 + 2 + 3 + 4 + .... + n的和
        ...

    print(mysum(100))  # 5050




闭包 closure
  什么是闭包
    闭包是指引用了此函数外部变量的函数
    如果一个内嵌函数访问了外部嵌套函数的变量,则这个内嵌函数就是闭包

  闭包必须满足三个条件:
    1. 必须有一个内嵌函数
    2. 内嵌函数必须引用外部函数中的变量
    3. 外部函数返回值必须是内嵌函数
  示例见:
    closure.py
    closure2.py

练习:
  已知有五位朋友在一起
    第五个人说它比第四个人大2岁
    第四个人说它比第三个人大2岁
    第三个人说它比第二个人大2岁
    第二个人说它比第一个人大2岁
    第一个人说它10岁
  编写程序:
    1) 算出第5个人几岁
    2) 算出第3个人几岁





练习:
  1. 写程序算出1~20 的阶乘的和
    1! + 2! + 3! + 4! + .... + 20!

  2. 已知有列表:
        L = [[3, 5, 8], 10, [[13, 14], 15, 18], 20]
    1) 写一个函数 print_list(lst) 打印出所有的数字
        print_list(L)  # 3 5 8 10 13 ....
    2) 写一个函数 sum_list(lst) 返回列表中所有数字的和
        print(sum_list(L))  # 106
    注:
       type(x) 函数可以返一个对象的类型
       如:
          >>> type(20) is int  # True
          >>> type([3, 5, 8]) is list  # True
          >>> type(20) is list  # False
  3. 改写之前的学生信息的程序,要求添加四个功能:
      | 5)  按学生成绩高-低显示学生信息 |
      | 6)  按学生成绩低-高显示学生信息 |
      | 7)  按学生年龄高-低显示学生信息 |
      | 8)  按学生年龄低-高显示学生信息 |











