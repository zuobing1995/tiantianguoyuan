day14回顾
异常 exception
  错误是引起异常的原因
  异常是当错误发生时的一种状态

异常的四条语句:
  try-except语句:
  try-finally语句
      执行必须要执行的语句(无论是正常还是异常状态)
  raise 语句
    抛出错误产生异常
  assert 语句
    当条件不满足时，抛出AssertionError类型的错误并进入异常状态
  





day15笔记:
迭代器Iterator
  什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指用iter(obj) 函数返回的对象(实例)
    迭代器可以用next(it) 函数获取可迭代对象的数据
迭代器函数 iter和next
  iter(iterable)  从可迭代对象中返回一个迭代器，iterable 必须是能提供一个迭代器的对象
  next(iterator)  从迭代器iterator中获取下一个记录，如果无法获取下一条记录，则触发StopIterator异常

  说明:
    1. 迭代器只能往前取值，不会后退
    2. 用iter函数可以返回一个可迭代对象的迭代器
  示例:
    L = [1, 3, 5, 7]
    it = iter(L)  # 让L提供一个能访问自己的迭代器
    next(it)  # 1 从迭代器中取值，让迭代器去获取L中的一个元素
    next(it)  # 3
    next(it)  # 5
    next(it)  # 7
    next(it)  # StopIteration 异常

    it = iter(range(1, 10, 3))
    next(it)  # 1
    next(it)  # 4
    next(it)  # 7
    next(it)  # StopIteration

迭代器的用途
  用迭代器可以依次访问可迭代对象的数据
示例:
  L = [2, 3, 5, 7]
  for x in L:
      print(x)  # 2 3 5 6
  # 以下用迭代器来访问L列表中的元素
  L = [2, 3, 5, 7]
  it = iter(L)  # 先拿到迭代器用iter绑定
  while True:
      x = next(it)  # 获取一个数据并绑定到x
      print(x)  # 2 3 5 7

练习:
  有一个集合:
     s = {'唐僧', '悟空', '八戒','沙僧'}

  用for语句来遍历所有元素如下:
    for x in s:
        print(x)
    else:
        print('遍历结束')
  将上面的for语句改写为while语句和迭代器实现



生成器 Generator
  什么是生成器
    生成器是能够动态提供数据的对象，生成器对象也是可迭代对象(实例)
  生成器有两种
     生成器函数
     生成器表达式

生成器函数的定义:
  含有yield语句的函数是生成器函数，此函数被调用将返回一个生成器对象
    yield翻译为产生(或生成)

yield 语句
  语法:
     yield 表达式
  说明:
    yield 用于 def 函数中，目的是将此函数作用生成器函数使用
    yield 用来生成数据，供迭代器和next(it) 函数使用
  示例见:
    yield.py
    yield2.py
    myinteger.py

生成器函数说明:
  生成器函数的调用将返回一个生成器对象，生成器对象是一个可迭代对象，通常用来动态生成数据
  生成器函数调用 return 语句会触发一个StopIterator异常


练习:
  写一个生成器函数 myeven(start, stop) 用来生成 start开始到stop结束(不包含stop)的偶数
  如:
    def myeven(start, stop):
        ....

    for x in myeven(1, 10):
         print(x)  # 2 4 6 8
    L = [x ** 2 for x in myeven(1, 20)]
    print(L)

练习:
  写一个生成器函数myfactorial(n)此函数用来生成n个从1开始的阶乘

  def myfactorial(n):
      ...

  L = list(myfactorial(5))  # L = [1, 2, 6, 24, 120]
                            #      1! 2! 3!  4!  5!







生成器表达式
  语法:
    (表达式 for 变量 in 可迭代对象 [if 真值表达式])
  作用:
    用推导式形式创建一个新的生成器
  说明:
    if 子句可以省略
  示例:
    gen = (x**2 for x in range(1, 5))
    it = iter(gen)
    print(next(it))  # 1
    print(next(it))  # 4
    print(next(it))  # 9
    print(next(it))  # 16
    print(next(it))  # StopIteration

练习:
   已知有列表:
     L = [2, 3, 5, 7]
     1) 写一个生成器函数，让此函数能够动态提供数据，数据为原列表的数字的平方加1
     2) 写一个生成器表达式，让此表达式能够动态提供数据，数据为原列表的数字的平方加1
     3） 生成一个列表，此列表内的数据是原列表数据的平方加1

生成器表达式和列表推导式的区别:
  见示例:
    gen_vs_list_comprehension.py
  生成器表达式是现用现生成，列表推导式是一次性生成静态数据




迭代工具函数:
  作用是生成一个个性化的可迭代对象

函数:
  zip(iter1 [, iter2[....]])  返回一个zip对象,此对象用于生成元组，此元组的每个数据来源于参数中的可迭代对象，当最小的可迭代对象不再提供数据时迭代结束

  enumerate(iterable [, start]) 生成带索引的枚举对象，返回的迭代类型为索引-值对(index-value)对，默认索引从零开始,也可以用start指定

zip示例:
  numbers = [10086, 10000, 10010, 95588]
  names = ['中国移动', '中国电信', '中国联通']
  for t in zi p(numbers, names):
      print(t)
  for No, number, name in zip(range(1, 100),
                              numbers,
                              names):
      print("序号",No, name, '的客服电话是:', number)

示例见:
  myzip.py

enumerate示例:
    names = ['中国移动', '中国电信', '中国联通']

    for t in enumerate(names):
        print(t)  #(0, '中国移动')(1, '中国电信')(2, '中国联通')
    for t in enumerate(names, 101):
        print(t)  #(101, '中国移动')(102, '中国电信')

练习:
  写一个程序，读入任意行文字，当输入空行时结束输入
  打印带有行号的输入结果
    如:
      请输入: abcde<回车>
      请输入: hello<回车>
      请输入: bye<回车>
      请输入: <回车>
    输出如下:
      第1行: abcde
      第2行: hello
      第3行: bye




序列的种类:
  字符串 str
  列表 list
  元组 tuple
  字节串 bytes 
  字节数组 bytearray

字节串和字节数组
字节串(也叫字节序列) bytes
  作用:
    存储以字节为单位的数据
    字节串是不可变的字节序列

字节:
  字节是0~255之间的整数，字节是数据传输和数据存储的基本单位
    (例如：中国移动的流量...,文件大小等)
  

创建空字节串的字面值
  b''
  b""
  b""""""
  b''''''
创建非空的字节串的字面值
  b'ABCD'
  b"ABCD"
  b'\x41\x42'

字节串的构造函数:
   bytes()  # 生成一个字的字节串，等同于 b''
   bytes(整型可迭代对象)  用可迭代对象创建一个字节串
   bytes(整数n)  生成n个值为0的字节串
   bytes(字符串, encoding='utf-8')  用字符串的转换编码生成一个字节串

示例:
  b = bytes()  
  b = bytes(range(65, 90))
  b = bytes(10)
  b = bytes('hello', 'utf-8')
  b = bytes('中文', 'utf-8')

bytes 的运算:
  与其它序列的运算规则完全相同
  + += * *= 
  < <= > >= == !=
  in / not in
  索引和切片

len(x), max(x), min(x), sum(x), any(x), all(x)


bytes 与 str的区别
  bytes 存储字节(0~255)
  str 存储字符(用来表示文字信息，值为0~65535或更大)

bytes与 str转换
        编码(encode)
  str   ---------->  bytes
    b = s.encode(encoding='utf-8')

         解码(decode)
  bytes  ---------> str
    s = b.decode(encoding='utf-8')

字节数组 bytearray
  可变的字节序列

构造函数:
   bytearray()  # 生成一个字的字节串
   bytearray(整型可迭代对象)  用可迭代对象创建一个字节数组
   bytearray(整数n)  生成n个值为0的字节数组
   bytearray(字符串, encoding='utf-8')  用字符串的转换编码生成一个字节数组

运算和字节串完全相同
  * *= + +=
  < <= > >= == !=
  in / not in
  索引 index / 切片 slice
  字节数组支持索引和切片赋值(重要)

bytearray的方法:
  见文档:




练习:
  1. 用生成器函数，生成素数，给出起始值begin和终止值 end, 生成begin到end范围内的素数
    如:
      def prime(begin, end):
        ...

      L=[x for x in prime(10, 20)]  #L=[11,13,17,19]

  2. 写一个生成器函数myxrange([start, ], stop[, step]) 来生成一系列整数
    要求:
      myxrange功能与range功能相同（不允许调用range函数)
    用自己写的myxrange函数结合生成器表达式求1~10内奇数的平方和

  3. 思考:
    学生信息管理系统每次启动时都要重新输入数据.
    如何让学生管理系统启动时就自动加载以前输入过的数据
    (预习 文件操作)





















