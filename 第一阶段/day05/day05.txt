day04回顾
  字符串的格式化表达式
    字符串 % (参数1,参数2,..)
  返回字符串
  　　占位符 %   类型码
       %        s
       %        d
       %        f
       %        x
                ....
循环语句:
  while 语句
  for语句

嵌套
  while ...:
      if ...:
           ....
      while ...:
          if ....:
              while....:
  

　　while 真值表达式:
       语句块1
  else:
       语句块2

break语句
　　终止当前循环





day05笔记:
for 语句
  作用:
    用来遍历可迭代对象的数据元素
      可迭代对象是指能依次获取数据元素的对象

  可迭代对象包括:
    字符串 str
    ---以下后面会讲---
    列表 list
    元组 tuple
    ...

for 语法:
  for 变量列表 in 可迭代对象:
      语句块１
  else:
      语句块2

示例见:
  for.py


练习:
  1. 任意输入一段字符串，
  　　1) 计算出输入字符'a'的个数，并打印出个数
  　　2) 计算出空格的个数，并打印出个数
  　　　　（要求用for语句，不允许用　str.count方法)
    思考:
      用while 语句能否实现上述功能

for 语句说明:
  else子句部分可以省略
  当在循环内部用break终止循环时，else子句部分不会执行

示例见:
  for_else.py


range 函数
  range(stop) 用来生成0~stop区间内的整数，直到stop为止(不包含stop)
  range(start, stop[, step])  用来生成start~stop区间内的整数,直到stop为止(不包含stop),每次生成整数后移动step
格式详见:
   >>> help(range)
作用:
  用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
说明:
  range返回的对象可以有for语句来进行依次迭代访问取出其中的整数
示意:
  range(4)         # 生成 0, 1, 2, 3
  range(3, 6)      # 生成 3, 4, 5
  range(1, 10, 2)  # 生成 1, 3, 5, 7, 9
  range(5, 0, -2)  # 生成 5, 3, 1
  range(4, 0)      # 空
练习:
  1. 用 for语句打印 1 ~ 20 的整数,打印在一行内:
    1 2 3 4 5 ..... 20


  2. 计算 1 + 3 + 5 + 7 + ..... + 99 的和
    分别用 for语句 和 while语句 实现


for 语句变量可能不被创建的问题:
for x in range(4, 0):
    print(x)

print('x绑定', x)


for 注意问题:
   见:
      for_range_times.py

for 语句的嵌套:
  for x in "ABC":
      for y in "123":
          print(x + y)
  

思考下列程序的打印次数:
  for x in range(5):
      for y in range(10):
          print("hello")  # 请问打印多少个hello?

练习:
  1. 求: 100以内有哪儿些数与自身+1的乘积再对 11 求余等于8?
      x * (x+1)  % 11 == 8

  2. 输入一个数,打印如下正方形(用for实现)
     请输入: 5
     打印:
       1 2 3 4 5
       1 2 3 4 5
       1 2 3 4 5
       1 2 3 4 5
       1 2 3 4 5
  3. 输入一个数,打印如下正方形
     请输入: 5
     打印:
       1 2 3 4 5
       2 3 4 5 6
       3 4 5 6 7
       4 5 6 7 8
       5 6 7 8 9

  4. 用程序生成如下字符串:
     1) "ABCDEFG..... XYZ"
     2) "AaBbCcDdEe......XxYyZz"
    提示(可以使用 ord 和 chr函数)
      参考 ascii编码




continue 语句
  作用:
    用于循环语句(while,for)中,不再执行本次循环continue之后的语句,重新开始一次新的循环
  语法:
    continue
  说明:
    1. 在while语句中执行continue,将会直接跳转到while语句的真值表达式处重新判断循环条件
    2. 在 for 语句中执行continue语句,将会从可迭代对象中取下一个元素,绑定变量后再次进行循环
示例见:
  continue.py
  continue2.py

练习:
  1. 求 1 ~ 100之间,所有不能被2, 3, 5, 7 整除的数的和
   (跳过能整除的,剩下的就是不能整除的)

while中使用continue示例见:
   while_continue.py

循环小结:
  四条语句:
    while 语句
    for 语句
    break 语句
    continue 语句
  可迭代对象:
    str 字符串
    range() 函数返回的对象



列表 list
  问题:
    如何将计算机运算的数据临时保存在一个地方,同时又方便添加,删除和修改等操作
  容器
列表的定义:
  列表是一种容器
  列表是可以被改变的序列
  列表是由一系列特定元素组成的,元素与元素之间可能没有任何的关联关系,但他们之间有先后顺序关系

python3的中的序列类型:
  字符串 str
  列表 list
  元组 tuple
  字节串 bytes
  字节数组 bytearray

创建空列表的字面值表达式
  []  # 创建一个空列表
  L = []  变量L绑定一个新创建的空列表
创建非空的列表的字面值:
  L = [1, 2, 3, 4]#L绑定一个新创建且含有四个元素的列表
  L = ['Beijing', 'Shanghai', 'Shenzhen']
  L = [1, 'Two', 3.14, '四']
  L = [1, 2, [3.1, 3.2, 3.2], 4]  

列表的构造函数 list
  list()  生成一个空的列表,等同于 []
  list(iterable)  用可迭代对象创建一个列表
示例:
  L = list()  # L = []
  L = list("hello")  # L = ['h','e','l','l','o',]
  L = list(range(5))  # L = [0, 1, 2, 3, 4]
列表的运算:
  算术运算:
    + += * *= (运算规则与字符串的运算规则相同)

+ 用于拼接列表,生成新的列表
  x = [1, 2, 3]
  y = [4, 5, 6]
  z = x + y  # z = [1,2,3,4,5,6]

+= 用原列表与右侧可迭代对象追加来修改原列表
  语法:
     列表变量 += 可迭代对象
  示例:
    x = [1, 2, 3]
    y = [4, 5, 6]
    x += y  # x = [1, 2, 3, 4, 5, 6]
    x += "ABC" # x = [1,2,3,4,5,6,'A','B','C']
    x = [1, 2, 3]
    x += range(4, 6)  # x = [1, 2, 3, 4, 5]
    # += 是改变原来的列表对象,并不会创建新的列表
    x = [1, 2, 3]
    print(id(x))
    x += [4, 5, 6]
    print(id(x))

* 生成重复的列表
  x = [1, 2] * 3  # x = [1,2,1,2,1,2]

*= 生成重复的列表,并改变对变量的绑定 
  x = [1, 2, 3]
  x *= 4  # x = [1,2,3,1,2,3,1,2,3,1,2,3]

列表的比较运算:
  运算符:
    < <= > >= == !=
       比较规则与字符串的比较规则相同

  示例:
    [1,2,3] < [1, 2, 4]  # True
    [1, 2, 3] < [3, 2, 1]  # True
    [1, 2, 3] == [3, 2, 1]  # False
    [2, 3] >= [1, 2, 3]  # True

    [1, "2"] > ['2', 1]  # 报错
    ["ABC", 1, 2, 3] < ["123", 3, 2]  # 

列表是可迭代对象
  L = [1, 3, 5, 7]
  for x in L:
     print(x)   # 1 3 5 7

练习:
  1. 输入三行文字，将这三行文字保存于列表L中，并打印
    如:
      请输入: abc<回车>
      请输入: 1234<回车>
      请输入: 你好<回车>
    生成如下列表L = ['abc', '1234', '你好']
    print(L)  # ['abc', '1234', '你好']

  2. 输入任意行文字，存于列表中L中，当不输入内容直接回车后结束输入:
     1) 打印L列表中的内容
     2) 打印出您刚才输入了几行文字信息
     3) 打印出您刚才输入了多少个字符数据


练习：
　　1. 写一个程序，任意输入一个数，判断这个数是否是素数(prime)
    素数（也叫质数),是只能被１和自身整除的正整数
     如: 2 3 5 7 11 13 17 19 ....
    提示:
      用排除法: 当判断x是否为素数时，只要让x分别除以2, 3, 4, 5 ... x-1，只要能整数则x不是素数,否则x是素数
  2. 输入一个正整数(代表树干的高度)
  　　　打印如下一棵圣诞树
     如:
       输入: 2 
     打印:
       *
      ***
       *
       *
     如:
       输入: 3
     打印:
        *
       ***
      *****
        *
        *
        *

  3. 算出100~999之间的水仙花数(Narcissistic Number)
    水仙花数是指百位的3次方 + 十位的3次方 + 个位的3次方等于原数的整数

    例如:
       153 = 1**3 + 5**3 + 3 ** 3
    答案:
      153  370 ...



















